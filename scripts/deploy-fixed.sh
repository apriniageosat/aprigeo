#!/bin/bash

# Script deployment yang sudah diperbaiki untuk mengatasi semua masalah
echo "üöÄ Fixed Deployment Script for Dokploy"
echo "======================================"

echo ""
echo "üîç Issues Fixed:"
echo "‚úÖ Build-time database connection errors"
echo "‚úÖ Port 80 conflict (using only port 8000)"
echo "‚úÖ Dynamic server usage in API routes"
echo "‚úÖ Redis connection errors during build"
echo "‚úÖ Service name consistency"
echo ""

echo "üìã Files to use for deployment:"
echo "==============================="
echo ""
echo "1. üê≥ Docker Compose File:"
echo "   Use: docker-compose.no-port-conflict.yml"
echo "   - Avoids port 80 conflict"
echo "   - Uses only port 8000"
echo "   - Includes RUNTIME_PHASE environment variable"
echo ""

echo "2. üîß Environment Variables (set in Dokploy):"
echo "   NODE_ENV=production"
echo "   PORT=8000"
echo "   RUNTIME_PHASE=true"
echo "   DATABASE_URL=postgresql://postgres:GtcCg1mKmrmEfgJLwSqQNlnESslWmEySQWrNHAmAis@apriniageosat-postgres:5432/geosatsolusindo"
echo "   POSTGRES_DB=geosatsolusindo"
echo "   POSTGRES_USER=postgres"
echo "   POSTGRES_PASSWORD=GtcCg1mKmrmEfgJLwSqQNlnESslWmEySQWrNHAmAis"
echo "   REDIS_URL=redis://apriniageosat-redis:6379"
echo "   NEXT_PUBLIC_MEILISEARCH_HOST=http://apriniageosat-meilisearch:7700"
echo "   NEXT_PUBLIC_MEILISEARCH_API_KEY=GtcCg1mKmrmEfgJLwSqQN+lnESslWmEySQWrNHAmAis"
echo "   MEILI_MASTER_KEY=GtcCg1mKmrmEfgJLwSqQN+lnESslWmEySQWrNHAmAis"
echo "   NEXTAUTH_SECRET=DkM0Yfqiqb/splFsII6k3ggH884sWKkFuSfhR2oUNzs"
echo "   NEXTAUTH_URL=https://apriniageosat.co.id"
echo "   NEXT_TELEMETRY_DISABLED=1"
echo ""

echo "üöÄ Deployment Steps:"
echo "==================="
echo ""
echo "1. Upload docker-compose.no-port-conflict.yml to Dokploy"
echo "   (rename to docker-compose.yml)"
echo ""
echo "2. Set all environment variables above in Dokploy dashboard"
echo ""
echo "3. Configure domain in Dokploy:"
echo "   - Domain: apriniageosat.co.id"
echo "   - Target Port: 8000"
echo "   - Enable SSL/HTTPS"
echo ""
echo "4. Deploy and wait for all services to start"
echo ""
echo "5. Test the deployment:"
echo "   - http://apriniageosat.co.id:8000 (should work immediately)"
echo "   - Configure reverse proxy for apriniageosat.co.id ‚Üí port 8000"
echo ""

echo "üîß Dokploy Configuration:"
echo "========================="
echo ""
echo "Option 1: Use Dokploy's built-in reverse proxy"
echo "- In project settings, add domain: apriniageosat.co.id"
echo "- Set target port: 8000"
echo "- Enable SSL"
echo ""
echo "Option 2: Manual reverse proxy configuration"
echo "- Configure nginx/traefik to route apriniageosat.co.id to port 8000"
echo "- Handle SSL termination"
echo ""

echo "üß™ Testing Commands:"
echo "==================="
echo ""
echo "# Test direct port access (should work)"
echo "curl http://apriniageosat.co.id:8000"
echo ""
echo "# Test health endpoint"
echo "curl http://apriniageosat.co.id:8000/api/health"
echo ""
echo "# Test after domain configuration"
echo "curl http://apriniageosat.co.id"
echo "curl https://apriniageosat.co.id"
echo ""

echo "üìù Key Changes Made:"
echo "==================="
echo ""
echo "1. app/api/health/route.ts:"
echo "   - Skip database check during build time"
echo "   - Use RUNTIME_PHASE environment variable"
echo ""
echo "2. app/api/products/route.ts:"
echo "   - Use request.nextUrl instead of request.url"
echo "   - Skip database operations during build"
echo ""
echo "3. lib/db.ts:"
echo "   - Skip database/Redis initialization during build"
echo "   - Add connection timeouts"
echo "   - Better error handling"
echo ""
echo "4. docker-compose.no-port-conflict.yml:"
echo "   - Remove port 80 mapping"
echo "   - Add RUNTIME_PHASE environment variable"
echo "   - Use consistent service names"
echo ""

echo "üéØ Expected Results:"
echo "==================="
echo ""
echo "After deployment:"
echo "‚úÖ Build should complete without database errors"
echo "‚úÖ All containers should start successfully"
echo "‚úÖ Port 8000 should be accessible"
echo "‚úÖ Health endpoint should respond"
echo "‚úÖ Domain routing should work after configuration"
echo ""

echo "üÜò If still having issues:"
echo "========================="
echo ""
echo "1. Check Dokploy logs for specific errors"
echo "2. Verify all environment variables are set"
echo "3. Test with minimal configuration first"
echo "4. Check if port 80 is being used by another service"
echo "5. Use docker-compose.minimal.yml for testing"
echo ""

echo "üéâ Ready for deployment with fixes applied!"